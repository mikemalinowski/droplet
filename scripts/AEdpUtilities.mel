

// --------------------------------------------------------------------------------
// Returns the first node which is driving the given attribute. This
// is particularly useful when wanting to show the node driving something.
// If nothing is driving the given attribute then the string "None" is
// returned.
global proc string AEdpGetDrivingName(string $attr) {
    string $inputs[] = `listConnections $attr`;

    if (size($inputs)) {
        return $inputs[0];
    }
    return "None";
}


// --------------------------------------------------------------------------------
// This will return the first selected node which is not the given
// skip node. This is useful when wanting to get a selected node which
// is not the node represented by an attribute editor panel.
global proc string AEdpGetSelectedNode(string $skip) {
    string $selected[] = `ls -sl`;
    for ($i = 0; $i < size($selected); $i++) {
        if ($selected[$i] != $skip) {
            return $selected[$i];
        }
    }
}


// --------------------------------------------------------------------------------
// This takes in the given data and splits it by "." - the first element is 
// then taken to be the node name.
global proc string AEdpExtractNodeName(string $data){
    string $parts[];
    tokenize($data, ".", $parts);
    return $parts[0];
}


// --------------------------------------------------------------------------------
// This will attempt to work out the likely facing axis of
// a bone by using its first child (or itself).
global proc string getFacingAxis(string $node) {

    // Assume the target is the node we're looking at
    // unless it has children
    string $target = $node;
    string $children[] = `listRelatives -children -type "joint" $node`;

    if (size($children) > 0) {
        $target = $children[0];
    }

    // Get the x, y and z axis
    float $x = `getAttr ($node + ".translateX")`;
    float $y = `getAttr ($node + ".translateY")`;
    float $z = `getAttr ($node + ".translateZ")`;

    // We want to know which of the three axis has
    // the longest length
    float $highest;
    $highest = `max $x $y`;
    $highest = `max $highest $z`;

    string $result = "Z";

    if ($highest == $x) {
        $result = "X";
    }

    if ($highest == $y) {
        $result = "Y";
    }

    return $result;
}


// --------------------------------------------------------------------------------
// This will create the branding panel which all Droplet nodes utilise.
// Primarily it adds the droplet banner. You can specify which banner to
// use by passing it as the icon variable.
global proc AEdpBrandingNew(string $data){

    string $parts[];
    tokenize($data, ".", $parts);
    string $icon = $parts[1] + ".png";

	setUITemplate -pushTemplate attributeEditorTemplate;

    columnLayout -adjustableColumn true;

        rowLayout -numberOfColumns 3;
            image -image "aeSoft2BoneIk.png" -width 400 -height 100;
			setParent ..;
        setParent ..;
    setParent ..;

    setUITemplate -popTemplate;
}


// --------------------------------------------------------------------------------
// This is the replacement method for the branding. However, the branding
// never changes so we do not need to edit it.
global proc AEdpBrandingReplace(string $node)
{
}
